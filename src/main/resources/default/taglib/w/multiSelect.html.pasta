<i:arg name="span" type="int" default="6"/>
<i:arg name="smallSpan" type="int" default="12" description="Defines the span for mobile devices"/>
<i:arg name="name" type="String"/>
<i:arg name="labelKey" type="String" default=""/>
<i:arg name="label" type="String" default="@i18n(labelKey)"/>
<i:arg name="helpKey" type="String" default=""/>
<i:arg name="help" type="String" default="@i18n(helpKey)"/>
<i:arg name="optional" type="boolean" default="false"/>
<i:arg name="maxItems" type="int" default="0" description="Maximum number of items allowed in the field. 0 = unlimited."/>
<i:arg name="required" type="boolean" default="false"/>
<i:arg name="readonly" type="boolean" default="false"/>
<i:arg name="adminOnly" type="boolean" default="false"/>
<i:arg name="allowCustomEntries" type="boolean" default="false"/>

<i:local name="id" value="@apply('multiselect-%s', call.generateLocalId())"/>

<div id="@id" class="multiselect">
    <w:textfield id="@apply('%s-input',id)" name="@apply('%s-input', name)" span="@span" smallSpan="@smallSpan"
                 value="" label="@label" help="@help" adminOnly="@adminOnly" readonly="@readonly" required="@required"/>
</div>

<select id="@id-suggestions-select" style="display: none" multiple="multiple">
    <i:render name="body"/>
</select>

<i:if test="optional">
    <input name="@name" type="hidden" value=""/>
</i:if>

<script>
    var initMultiSelect = function (args) {
        var createSuggestionsObject = function (selectId) {
            var allSuggestions = [];
            var initialSelection = [];

            var $select = $('#' + selectId);
            for (var i = 0; i < $select[0].options.length; i++) {
                var option = $select[0].options[i];
                var token = {
                    label: option.text,
                    value: option.value
                };
                allSuggestions.push(token);
                if (option.selected) {
                    initialSelection.push(token);
                }
            }
            $select.remove();

            return {
                getAllSuggestions: function () {
                    return allSuggestions;
                },
                getInitialSelection: function () {
                    return initialSelection;
                },
                addSuggestion: function (token) {
                    allSuggestions.push(token)
                },
                forEachMatchingSuggestion: function (query, callback) {
                    var found = undefined;
                    $.each(allSuggestions, function (i, element) {
                        if (element.label.toLowerCase().indexOf(query.toLowerCase()) !== -1 ||
                            element.value.toLowerCase().indexOf(query.toLowerCase()) !== -1) {
                            if (callback) {
                                callback(element);
                            }
                        }
                    });
                    return found;
                },
                getTokenForValue: function (value) {
                    var token = undefined;
                    $.each(allSuggestions, function (i, element) {
                        if (element.value === value) {
                            token = element;
                        }
                    });
                    return token;
                }
            }
        }

        var autocompleteTemplates = {
            basic:
                '<div class="autocomplete-row autocomplete-selectable-element autocomplete-row-js' +
                '            {{#inTokenfield}}in-token-field{{/inTokenfield}}"> ' +
                '   <span class="element-heading">{{label}}</span>' +
                '   <span class="autocomplete-data" data-autocomplete="{{value}}" style="display: none"></span>' +
                '</div>'
        }

        var suggestions = createSuggestionsObject(args.id + '-suggestions-select');

        var tokenfield = sirius.createTokenfield();
        var autocomplete = sirius.createAutocomplete();

        autocomplete.on('onHoverRow', function ($row) {
            autocomplete.getInput().val($row.find('.autocomplete-data').data('autocomplete'));
        });

        autocomplete.on('onUnhoverRow', function ($row) {
            autocomplete.getInput().val('');
        });

        autocomplete.on('onReady', function ($row) {
            tokenfield.on('onBeforeCreateToken', function (token) {
                // hide the autocomplete imediately, because else "dragging" over the completions will introduce unwanted
                // state, e.g. text of a compeltions-row is in input field, but not created as token
                autocomplete.hide();
                return true;
            });
        });

        tokenfield.on('onBeforeCreateToken', function (token) {
            if (tokenfield.hasToken(token)) {
                tokenfield.removeToken(token);
                return false;
            }
            if (!suggestions.getTokenForValue(token.value)) {
                if (args.allowCustomEntries) {
                    suggestions.addSuggestion(token);
                } else {
                    return false;
                }
            } else {
                token.label = suggestions.getTokenForValue(token.value).label;
            }
            return true;
        });

        tokenfield.start({
            id: args.id + '-input',
            showRemovalElement: false,
            hiddenInputsName: args.name,
            tokenfield: {
                createTokensOnBlur: true,
                limit: args.maxItems
            }
        });

        tokenfield.appendTokens(suggestions.getInitialSelection());

        if (!args.readonly) {
            autocomplete.start({
                inputField: tokenfield.getInputFieldId(),
                localSource: {
                    callback: function (query) {
                        var rows = [];
                        if (args.allowCustomEntries && query && !suggestions.getTokenForValue(query)) {
                            rows.push({
                                label: query,
                                value: query,
                                type: 'basic',
                                inTokenfield: tokenfield.hasToken({value: query})
                            });
                        }
                        suggestions.forEachMatchingSuggestion(query, function (element) {
                            rows.push({
                                label: element.label,
                                value: element.value,
                                type: 'basic',
                                inTokenfield: tokenfield.hasToken(element)
                            });
                        });
                        if (rows.length === 0) {
                            rows.push({
                                label: args.noMatchesText,
                                type: 'basic',
                                inTokenfield: false
                            });
                        }
                        return rows;
                    }
                },
                anchor: '#' + args.id + ' .tokenfield',
                templates: autocompleteTemplates,
                completions: {
                    id: args.id + '-completion',
                    height: '300px'
                }
            });
        } else {
            // add the 'disabled' class to the tokenfield, so it looks grey and 'disabled'
            // we have to add that manually, because just 'readonly' does not look like that for the tokenfield
            // but we also don't want to disable the field, because in some browsers disabled fields are not sent when
            // posting
            $('#' + args.id + ' .tokenfield').addClass('disabled');
        }
    }
</script>

<script>
    $(document).ready(function () {
        initMultiSelect({
            id: '@id',
            name: '@name',
            noMatchesText : '@i18n("Select2.noMatches")',
            readonly: @readonly,
            maxItems: @maxItems,
            allowCustomEntries: @allowCustomEntries
        });
    });
</script>
