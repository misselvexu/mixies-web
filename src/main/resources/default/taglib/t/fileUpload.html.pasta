<i:arg type="String" name="id" default="@generateId('file-upload-%s')"/>
<i:arg type="String" name="labelKey" default="FileUpload.uploadBtn"/>
<i:arg type="String" name="label" default="@i18n(labelKey)"/>
<i:arg type="String" name="uploadUrl"/>
<i:arg name="class" type="String" default="" description="Lists additional CSS classes to apply to the dropzone."/>
<i:arg name="btnClass" type="String" default=""
       description="Lists additional CSS classes to apply to the upload button."/>
<i:arg type="String" name="acceptedFiles" default=""
       description="This is a comma separated list of allowed mime types or file extensions. Eg.: image/*,application/pdf,.psd"/>
<i:arg type="int" name="maxParallelConnections" default="3"/>
<i:arg type="String" name="previewsContainer" default=""
       description="A dom selector to render the upload progress into. If not set, will render below the button."/>

<i:pragma name="description" value="Renders a file upload within a Wondergem template"/>

<div class="dropzone sirius-fileupload mb-lg-0 mb-2 @class" id="@id">
    <a class="dropzone-select btn btn-primary @btnClass">@label</a>

    <i:if test="!isFilled(previewsContainer)">
        <div class="dropzone-items mt-2">
        </div>
    </i:if>
</div>

<script type="text/javascript">
    Dropzone.options[sirius.camelize('@id')] = {
        url: function (files) {
            const uploadUrl = '@raw {@uploadUrl}';
            let parameterIndicator = '?';
            if (uploadUrl.indexOf('?') >= 0) {
                parameterIndicator = '&';
            }
            return uploadUrl + parameterIndicator + 'filename=' + files[0].name;
        },
        sendFileAsBody: true,
        parallelUploads: ___maxParallelConnections,
        maxFilesize: null,
        acceptedFiles: '@raw {@acceptedFiles}' || null,
        previewTemplate: '' +
            '<div class="dropzone-item">\n' +
            '   <div class="dropzone-file">\n' +
            '       <div class="dropzone-filename">\n' +
            '           <span data-dz-name></span>\n' +
            '           <strong>(<span data-dz-size></span>)</strong>\n' +
            '           <span class="dz-success-mark">✔</span>\n' +
            '           <span class="dz-error-mark">✘</span>\n' +
            '       </div>\n' +
            '       <div class="dropzone-error" data-dz-errormessage></div>\n' +
            '   </div>\n' +
            '\n' +
            '   <div class="dropzone-progress d-flex">\n' +
            '       <div class="progress flex-grow-1">\n' +
            '           <div class="progress-bar bg-primary" role="progressbar" aria-valuemin="0" aria-valuemax="100" ' +
            '                         aria-valuenow="0" data-dz-uploadprogress>' +
            '           </div>\n' +
            '       </div>\n' +
            '       <span class="dropzone-delete ml-4" data-dz-remove><i class="fa fa-times"></i></span>\n' +
            '   </div>\n' +
            '</div>',
        previewsContainer: '@previewsContainer' || '#' + '@id' + ' .dropzone-items',
        clickable: '#' + '@id' + ' .dropzone-select',
        error: function (file, message) {
            if (file.status === Dropzone.CANCELED) {
                // no need to show error to the user
                return;
            }
            if (file.previewElement) {
                file.previewElement.classList.add('dz-error');

                if (typeof message !== 'string' && message.message) {
                    message = message.message;
                } else {
                    message = '___i18n("template.html.uploadFailed")';
                }

                file.previewElement.querySelector('[data-dz-errormessage]').innerHTML = message;
                addErrorMessage(message);
            }
        },
        init: function () {
            this.on('success', function (file, response) {
                if (response.error) {
                    file.previewElement.classList.add('dz-error');
                    file.previewElement.classList.remove('dz-success');
                    const message = response.message || '___i18n("template.html.uploadFailed")';
                    file.previewElement.querySelector('[data-dz-errormessage]').innerHTML = message;
                    addErrorMessage(message);
                } else if (response.refresh) {
                    this.reloadAfterQueueComplete = true;
                }
            });
            this.on('queuecomplete', function () {
                if (this.reloadAfterQueueComplete) {
                    setTimeout(function () {
                        document.location.reload(true);
                    }, 2500);
                }
            });
        }
    }
</script>
