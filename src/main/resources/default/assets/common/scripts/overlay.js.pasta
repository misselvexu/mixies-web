(function (overlay) {
    const template = '<div class="sci-overlay-background">' +
        '    <div class="sci-overlay">' +
        '        {{#closable}}<div class="sci-overlay-button-container">' +
        '            <a role="button" class="sci-overlay-button sci-overlay-button-close sci-overlay-button-close-js"></a>' +
        '        </div>{{/closable}}' +
        '        <div class="sci-overlay-content-outer-container">' +
        '            <div class="sci-overlay-content-inner-container">' +
        '               <div class="sci-overlay-content sci-overlay-content-js">' +
        '                   {{{content}}}' +
        '               </div>' +
        '           </div>' +
        '       </div>' +
        '   </div>' +
        '</div>';

    const overlayStack = [];

    /**@
     * Creates and shows a new overlay.
     * <p>
     * If one or more overlays already exist, the new overlay will be shown on top of already existing overlays.
     *
     * @param args object containing:
     *              - content:   html content that will be rendered inside the overlay, either a string or an HTMLElement node; required
     *              - closable:  boolean flag indicating whether to render a close button; defaults to **true**
     *              - yieldable: boolean flag indicating whether a background-click closes the overlay; defaults to the value of `closable`
     */
    overlay.createAndShowOverlay = function (args) {
        const isStringContent = args.content instanceof String || typeof args.content === 'string';
        const isNodeContent = args.content instanceof HTMLElement;

        if (!isStringContent && !isNodeContent) {
            throw new Error('Content must either be a string or an object of class HTMLElement.');
        }

        if (args.name) {
            console.debug('Overlay names are no longer supported:', args.name);
        }

        const closable = typeof args.closable === 'undefined' ? true : !!args.closable;
        const yieldable = typeof args.yieldable === 'undefined' ? closable : !!args.yieldable;

        const renderArgs = {
            closable: closable,
            content: isStringContent ? args.content : undefined
        };

        const _html = Mustache.render(template, renderArgs);
        const _overlayContainer = document.createElement('div');
        _overlayContainer.innerHTML = _html;

        if (isNodeContent) {
            const _contentContainer = _overlayContainer.querySelector('.sci-overlay-content-js');
            _contentContainer.appendChild(args.content);
        }

        const _overlay = _overlayContainer.firstChild;

        if (closable) {
            _overlay.querySelector('.sci-overlay-button-close-js').addEventListener('click', function () {
                overlay.destroyOverlay();
            });
        }

        if (yieldable) {
            _overlay.addEventListener('click', function (event) {
                if (event.target === _overlay) {
                    overlay.destroyOverlay();
                }
            });
        }

        overlayStack.push(_overlay);

        if (overlayStack.length === 1) {
            _overlay.classList.add('first');
            document.documentElement.classList.add('sci-overlay-static-body');
        }

        window.addEventListener('keyup', destroyOverlayEventHandler);
        document.body.appendChild(_overlay);

        if (isStringContent) {
            sirius.executeEmbeddedScripts(_overlay);
        }

        sirius.dispatchEvent('sci-overlay-shown');
    }

    overlay.destroyOverlay = function () {
        const _overlay = overlayStack.pop();

        if (_overlay) {
            _overlay.parentElement.removeChild(_overlay);
        }

        if (overlayStack.length === 0) {
            window.removeEventListener('keyup', destroyOverlayEventHandler);
            document.documentElement.classList.remove('sci-overlay-static-body');
        }

        sirius.dispatchEvent('sci-overlay-destroyed');
    }

    const destroyOverlayEventHandler = function (event) {
        if (event.key === 'Escape') {
            overlay.destroyOverlay();
        }
    }
}(window.sirius.overlay = window.sirius.overlay || {}));
