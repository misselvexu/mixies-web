<i:arg type="String" name="id" />

<w:page titleKey="ManagedTask.title">

    <i:block name="head">
        <style>
            #output .TRACE {
                color: #555555;
            }

            #output .SUCCESS {
                color: #21692e
            }

            #output .ERROR {
                color: #690000;
            }

            #output .WARN {
                color: #bda721;
            }
        </style>
    </i:block>

    <i:block name="breadcrumbs">
        <li><a href="/system/tasks">@i18n("ManagedTask.plural")</a></li>
        <li><a href="/system/task/@id">@i18n("ManagedTask.title")</a></li>
    </i:block>

    <w:pageHeader>
        @i18n("ManagedTask.title")
        <span class="pull-right"><a href="#" id="cancel" class="btn btn-danger">@i18n("NLS.cancel")</a></span>
        <div class="clearfix"></div>
    </w:pageHeader>

    <div class="row">
        <div class="col-md-12 form-group ">
            <label>
                <span>@i18n("ManagedTask.name")</span>
            </label>
            <input id="nameField" type="text" value="" class="form-control input-block-level" readonly/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 form-group ">
            <label>
                <span>@i18n("ManagedTask.message")</span>
            </label>
            <input id="messageField" type="text" value="" class="form-control input-block-level" readonly/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 form-group ">
            <label>
                <span>@i18n("ManagedTask.user")</span>
            </label>
            <input id="userField" type="text" value="" class="form-control input-block-level" readonly/>
        </div>
        <div class="col-md-4 form-group ">
            <label>
                <span>@i18n("ManagedTask.scheduled")</span>
            </label>
            <input id="scheduledField" type="text" value="" class="form-control input-block-level" readonly/>
        </div>
        <div class="col-md-4 form-group ">
            <label>
                <span>@i18n("ManagedTask.started")</span>
            </label>
            <input id="startedField" type="text" value="" class="form-control input-block-level" readonly/>
        </div>
    </div>


    <div class="form-actions">
        <a href="/system/tasks" class="btn">@i18n("NLS.back")</a>
    </div>

    <div class="counterBox" style="display: none">
        <w:heading labelKey="ManagedTask.counters" />
        <div class="counters row"></div>
        <div class="clearfix"></div>
    </div>

    <w:heading>
        <i class="fa fa-refresh fa-spin" id="spinner"></i> @i18n("ManagedTask.output") <span id="stateLabel"
                                                                                             class="label"></span>
        <span class="pull-right"><a href="#" id="clearBtn" class="btn">@i18n("ManagedTask.cleanup")</a></span>
    </w:heading>

    <table class="table table-striped">
        <tr>
            <th class="col-md-3 align-right">@i18n("ManagedTask.timestamp")</th>
            <th class="col-md-9">@i18n("ManagedTask.message")</th>
        </tr>
        <tbody id="output">

        </tbody>
    </table>

    <script type="text/javascript">

        var taskId = '@id';
        var lastLog = 0;
        var timer = null;
        var $output = $('#output');
        var $counters = $('.counters');

        function limitNumberOfLogs() {
            var numberOfRows = $('tr', $output).length;
            var rowsToRemove = numberOfRows - 256;
            while (rowsToRemove > 0) {
                $('tr:last', $output).remove();
                rowsToRemove--;
            }
        }

        function updateState() {
            $.getJSON('/system/task/' + taskId + '/api/info',
                {logLimit: lastLog},
                function (data) {
                    clearTimeout(timer);
                    if (data.logs != null) {
                        for (i = 0; i < data.logs.length; i++) {
                            var row = $('<tr></tr>');
                            row.append($('<td></td>').text(data.logs[i].date).addClass("align-right"));
                            row.append($('<td></td>').text(data.logs[i].message).addClass("message").addClass(data.logs[i].type));
                            row.prependTo($output);
                        }
                        limitNumberOfLogs();
                        lastLog = data.lastLog;
                    }

                    if (data.counters.length > 0) {
                        $('.counterBox').show();
                        $counters.html('');
                        for (i = 0; i < data.counters.length; i++) {
                            var table = $('<table class="table table-striped"></table>');
                            table.append($('<thead></thead>').append($('<tr></tr>').append($('<th></th>').text(data.counters[i].name))));
                            table.append($('<tbody></tbody>').append($('<tr></tr>').append($('<td></td>').text(data.counters[i].value))));
                            var box = $('<div class="col-md-4"></div>');
                            table.appendTo(box);
                            box.appendTo($counters);
                        }
                    }

                    if (data.found) {
                        $('#nameField').val(data.name);
                        $('#messageField').val(data.message);
                        $('#userField').val(data.user);
                        $('#scheduledField').val(data.scheduled);
                        $('#startedField').val(data.started);

                        $('#stateLabel')
                            .removeClass()
                            .addClass('label')
                            .addClass(data.stateClass)
                            .text(data.stateName)
                            .show();
                    } else {
                        $('#stateLabel').hide();
                    }

                    if (data.found && data.state != 'TERMINATED') {
                        timer = setTimeout(updateState, 1000);
                    } else {
                        taskId = null;
                        $('#cancel').hide();
                        $('#spinner').hide();
                    }
                }
            );
        }

        updateState();

        $('#clearBtn').click(function () {
            $output.html('');
            return true;
        });

        $('#cancel').click(function () {
            if (taskId != null) {
                $.getJSON('/system/task/' + taskId + '/api/cancel',
                    {},
                    function (data) {
                        clearTimeout(timer);
                        timer = setTimeout(updateState, 500);
                    }
                );
            }
        });

    </script>

</w:page>

